#!/usr/bin/env node
/*jshint node: true, strict: true, globalstrict: true, es5: true, indent: 4, immed: true, undef: true, unused: true */
'use strict';

var Hex = require('./hex.js'),
    ASN1 = require('./asn1.js'),
    tests;

tests = [
    // http://luca.ntop.org/Teaching/Appunti/asn1.html
    // actually reports the string as "011011100101110111"
    ['03 04 06 6e 5d c0', '(18 bit)\n111011101001110110', 'DER encoding'],
    ['03 04 06 6e 5d e0', '(18 bit)\n111011101001110110', 'padded with "100000"'],
    ['03 81 04 06 6e 5d c0', '(18 bit)\n111011101001110110', 'long form of length octets'],
    ['23 09 03 03 00 6e 5d 03 02 06 c0', '(18 bit)\n111011101001110110', 'constructed encoding: "0110111001011101" + "11"'],
    // http://msdn.microsoft.com/en-us/library/windows/desktop/aa379076(v=vs.85).aspx

        '(3 elem)', 'PKCS#10 request'],
    // Int10
    ['060C69C7C79AB78084C289F9870D', '2.25.84478768945400492475277', 'Big OID arc'],
    ['02102FA176B36EE9F049F444B40099661945', '(126 bit) 63312083136615639753586560173617846597', 'Big integer (126 bit)'],
    ['028181008953097086EE6147C5F4D5FFAF1B498A3D11EC5518E964DC52126B2614F743883F64CA51377ABB530DFD20464A48BD67CD27E7B29AEC685C5D10825E605C056E4AB8EEA460FA27E55AA62C498B02D7247A249838A12ECDF37C6011CF4F0EDEA9CEE687C1CB4A51C6AE62B2EFDB000723A01C99D6C23F834880BA8B42D5414E6F',
        '(1024 bit) 96432446964907009840023644401994013457468837455140331578268642517697945390319089463541388080569398374873228752921897678940332050406994011437231634303608704223145390228074087922901239478374991949372306413157758278029522534299413919735715864599284769202556071242381348472464716517735026291259010477833523908207',
        'Big integer (1024 bit)'],
];

tests.forEach(function (t) {
    var input = t[0],
        expected = t[1],
        comment = t[2],
        result = null;
    try {
        result = ASN1.decode(Hex.decode(input)).content();
        //TODO: check structure, not only first level content
    } catch (e) {
        result = 'Exception:\n' + e;
    }
    if (result == expected)
        console.log('\x1B[1m\x1B[32mOK \x1B[39m\x1B[22m ' + comment);
    else
        console.log('\x1B[1m\x1B[31mERR\x1B[39m\x1B[22m ' + comment + '\n' + result);
});
